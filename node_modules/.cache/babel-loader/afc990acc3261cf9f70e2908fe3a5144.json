{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samue\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Initialize from \"./Initialize\";\nimport StartStop from \"./StartStop\";\nimport FocusTimer from \"./FocusTimer\";\nimport Progress from \"./Progress\";\n/**\n * A component representing a Pomodoro timer.\n * @returns {JSX} A <div> element containing all other components.\n */\n\nfunction Pomodoro() {\n  const initTimer = {\n    focusMax: 60 * 25,\n    // 60sec * 25min\n    focusLeft: 60 * 25,\n    focusFloor: 60 * 5,\n    // 60sec * 5min\n    focusRoof: 60 * 60,\n    // 60sec * 60min\n    breakMax: 60 * 5,\n    // 60sec * 5min\n    breakLeft: 60 * 5,\n    breakFloor: 60 * 1,\n    // 60sec * 1min\n    breakRoof: 60 * 15,\n    // 60sec * 15min\n    isTimerRunning: false,\n    focus: true,\n    sessionStarted: false\n  };\n  const [timer, setTimer] = useState({ ...initTimer\n  }); // useInterval is called every second when the timer is on\n\n  useInterval(() => {\n    if (timer.focusLeft <= 0 || timer.breakLeft <= 0) {\n      const alarm = new Audio(`https://onlineclock.net/audio/options/default.mp3`).play();\n      console.log(alarm);\n      switchModes();\n    } else {\n      if (timer.focus) timePassed(\"focusLeft\");else timePassed(\"breakLeft\");\n    }\n  }, timer.isTimerRunning ? 1000 : null);\n  /**\n   * If a second has passed, appropriately decrease second on timer.\n   * @param {string} mode - Either \"focusLeft\" or \"breakLeft\".\n   */\n\n  function timePassed(mode) {\n    setTimer(() => {\n      return { ...timer,\n        [mode]: timer[mode] - 1\n      };\n    });\n  }\n  /**\n   * Once focus/break ends, switch modes and reset timers.\n   */\n\n\n  function switchModes() {\n    setTimer(() => {\n      return { ...timer,\n        focusLeft: timer.focusMax,\n        breakLeft: timer.breakMax,\n        focus: !timer.focus\n      };\n    });\n  }\n  /**\n   * Adds an extra \"0\" to single-digit numbers.\n   * @param {number} num - The number to pad.\n   * @returns {number} - The padded number, if padded at all.\n   */\n\n\n  function pad(num) {\n    return num < 10 ? \"0\" + num : num;\n  }\n  /**\n   * Gives a time formatted in mm:ss.\n   * @param {string} mode Four possibilities: focusMax, focusLeft, breakMax, breakLeft \n   */\n\n\n  function getTime(mode) {\n    return `${pad(Math.floor(timer[mode] / 60))}:${pad(timer[mode] % 60)}`;\n  }\n  /**\n   * Gives a key of the timer object.\n   * @param {string} key The key of the timer object.\n   */\n\n\n  function get(key) {\n    return timer[key];\n  }\n  /**\n   * Increments/decrements max of focus/break.\n   * @param {string} mode - Either \"focus\" or \"break\".\n   * @param {number} change - Amount to change max by.\n   */\n\n\n  function changeMax(mode, change) {\n    const newTime = change < 0 ? Math.max(timer[mode + \"Floor\"], timer[mode + \"Max\"] + change) : Math.min(timer[mode + \"Roof\"], timer[mode + \"Max\"] + change);\n    setTimer(() => {\n      return { ...timer,\n        [mode + \"Max\"]: newTime,\n        [mode + \"Left\"]: newTime\n      };\n    });\n  }\n  /**\n   * Plays/pauses the timer.\n   */\n\n\n  function playPause() {\n    setTimer(() => {\n      return { ...timer,\n        isTimerRunning: !timer.isTimerRunning,\n        sessionStarted: true\n      };\n    });\n  }\n  /**\n   Stops the timer, resetting it.\n   */\n\n\n  function stop() {\n    setTimer(() => {\n      return { ...timer,\n        isTimerRunning: false,\n        sessionStarted: false,\n        focusLeft: timer.focusMax,\n        breakLeft: timer.breakMax,\n        focus: true\n      };\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Initialize, {\n    changeMax: changeMax,\n    getTime: getTime,\n    mode: \"focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Initialize, {\n    changeMax: changeMax,\n    getTime: getTime,\n    mode: \"break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  })))), /*#__PURE__*/React.createElement(StartStop, {\n    playPause: playPause,\n    get: get,\n    stop: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FocusTimer, {\n    getTime: getTime,\n    get: get,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(Progress, {\n    get: get,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 4\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/samue/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Initialize","StartStop","FocusTimer","Progress","Pomodoro","initTimer","focusMax","focusLeft","focusFloor","focusRoof","breakMax","breakLeft","breakFloor","breakRoof","isTimerRunning","focus","sessionStarted","timer","setTimer","alarm","Audio","play","console","log","switchModes","timePassed","mode","pad","num","getTime","Math","floor","get","key","changeMax","change","newTime","max","min","playPause","stop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA;AACA;AACA;AACA;;AACA,SAASC,QAAT,GAAoB;AAClB,QAAMC,SAAS,GAAG;AAClBC,IAAAA,QAAQ,EAAE,KAAK,EADG;AACC;AACnBC,IAAAA,SAAS,EAAE,KAAK,EAFE;AAGlBC,IAAAA,UAAU,EAAE,KAAK,CAHC;AAGE;AACpBC,IAAAA,SAAS,EAAE,KAAK,EAJE;AAIE;AAEpBC,IAAAA,QAAQ,EAAE,KAAK,CANG;AAMA;AAClBC,IAAAA,SAAS,EAAE,KAAK,CAPE;AAQlBC,IAAAA,UAAU,EAAE,KAAK,CARC;AAQE;AACpBC,IAAAA,SAAS,EAAE,KAAK,EATE;AASE;AAEpBC,IAAAA,cAAc,EAAE,KAXE;AAYlBC,IAAAA,KAAK,EAAE,IAZW;AAalBC,IAAAA,cAAc,EAAE;AAbE,GAAlB;AAeA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,EAAC,GAAGO;AAAJ,GAAD,CAAlC,CAhBkB,CAkBlB;;AACDN,EAAAA,WAAW,CACR,MAAM;AACP,QAAGkB,KAAK,CAACV,SAAN,IAAmB,CAAnB,IAAwBU,KAAK,CAACN,SAAN,IAAmB,CAA9C,EAAiD;AAChD,YAAMQ,KAAK,GAAG,IAAIC,KAAJ,CAAW,mDAAX,EAA+DC,IAA/D,EAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAK,MAAAA,WAAW;AACX,KAJD,MAKK;AACJ,UAAGP,KAAK,CAACF,KAAT,EACCU,UAAU,CAAC,WAAD,CAAV,CADD,KAGCA,UAAU,CAAC,WAAD,CAAV;AACD;AACC,GAbO,EAcRR,KAAK,CAACH,cAAN,GAAuB,IAAvB,GAA8B,IAdtB,CAAX;AAiBA;AACD;AACA;AACA;;AACC,WAASW,UAAT,CAAoBC,IAApB,EAA0B;AACzBR,IAAAA,QAAQ,CAAC,MAAM;AACd,aAAO,EACN,GAAGD,KADG;AAEN,SAACS,IAAD,GAAQT,KAAK,CAACS,IAAD,CAAL,GAAc;AAFhB,OAAP;AAIA,KALO,CAAR;AAMA;AAED;AACD;AACA;;;AACC,WAASF,WAAT,GAAuB;AACtBN,IAAAA,QAAQ,CAAC,MAAM;AACd,aAAO,EACN,GAAGD,KADG;AAENV,QAAAA,SAAS,EAAEU,KAAK,CAACX,QAFX;AAGNK,QAAAA,SAAS,EAAEM,KAAK,CAACP,QAHX;AAINK,QAAAA,KAAK,EAAE,CAACE,KAAK,CAACF;AAJR,OAAP;AAMA,KAPO,CAAR;AAQA;AAED;AACD;AACA;AACA;AACA;;;AACC,WAASY,GAAT,CAAaC,GAAb,EAAkB;AACjB,WAAOA,GAAG,GAAG,EAAN,GAAW,MAAMA,GAAjB,GAAuBA,GAA9B;AACA;AAED;AACD;AACA;AACA;;;AACC,WAASC,OAAT,CAAiBH,IAAjB,EAAuB;AACtB,WAAQ,GAAGC,GAAG,CAACG,IAAI,CAACC,KAAL,CAAWd,KAAK,CAACS,IAAD,CAAL,GAAc,EAAzB,CAAD,CAAgC,IAAIC,GAAG,CAACV,KAAK,CAACS,IAAD,CAAL,GAAc,EAAf,CAAoB,EAAzE;AACA;AAED;AACD;AACA;AACA;;;AACC,WAASM,GAAT,CAAaC,GAAb,EAAkB;AACjB,WAAOhB,KAAK,CAACgB,GAAD,CAAZ;AACA;AAED;AACD;AACA;AACA;AACA;;;AACC,WAASC,SAAT,CAAmBR,IAAnB,EAAyBS,MAAzB,EAAiC;AAChC,UAAMC,OAAO,GAAGD,MAAM,GAAG,CAAT,GACbL,IAAI,CAACO,GAAL,CAASpB,KAAK,CAACS,IAAI,GAAG,OAAR,CAAd,EAAgCT,KAAK,CAACS,IAAI,GAAG,KAAR,CAAL,GAAsBS,MAAtD,CADa,GAEbL,IAAI,CAACQ,GAAL,CAASrB,KAAK,CAACS,IAAI,GAAG,MAAR,CAAd,EAA+BT,KAAK,CAACS,IAAI,GAAG,KAAR,CAAL,GAAsBS,MAArD,CAFH;AAIAjB,IAAAA,QAAQ,CAAC,MAAM;AACd,aAAO,EACN,GAAGD,KADG;AAEN,SAACS,IAAI,GAAG,KAAR,GAAgBU,OAFV;AAGN,SAACV,IAAI,GAAG,MAAR,GAAiBU;AAHX,OAAP;AAKA,KANO,CAAR;AAOA;AAED;AACD;AACA;;;AACE,WAASG,SAAT,GAAqB;AACnBrB,IAAAA,QAAQ,CAAC,MAAM;AAChB,aAAO,EACN,GAAGD,KADG;AAENH,QAAAA,cAAc,EAAE,CAACG,KAAK,CAACH,cAFjB;AAGNE,QAAAA,cAAc,EAAE;AAHV,OAAP;AAKA,KANS,CAAR;AAOD;AAEF;AACD;AACA;;;AACC,WAASwB,IAAT,GAAgB;AACftB,IAAAA,QAAQ,CAAC,MAAM;AACd,aAAO,EACN,GAAGD,KADG;AAENH,QAAAA,cAAc,EAAE,KAFV;AAGNE,QAAAA,cAAc,EAAE,KAHV;AAINT,QAAAA,SAAS,EAAEU,KAAK,CAACX,QAJX;AAKNK,QAAAA,SAAS,EAAEM,KAAK,CAACP,QALX;AAMNK,QAAAA,KAAK,EAAE;AAND,OAAP;AAQA,KATO,CAAR;AAUA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACD;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,UAAD;AACC,IAAA,SAAS,EAAEmB,SADZ;AAEC,IAAA,OAAO,EAAEL,OAFV;AAGC,IAAA,IAAI,EAAC,OAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,eAQC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,UAAD;AACC,IAAA,SAAS,EAAEK,SADZ;AAEC,IAAA,OAAO,EAAEL,OAFV;AAGC,IAAA,IAAI,EAAC,OAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,CARD,CADC,eAoBE,oBAAC,SAAD;AACF,IAAA,SAAS,EAAEU,SADT;AAEF,IAAA,GAAG,EAAEP,GAFH;AAGF,IAAA,IAAI,EAAEQ,IAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,eA0BD,oBAAC,UAAD;AACC,IAAA,OAAO,EAAEX,OADV;AAEC,IAAA,GAAG,EAAEG,GAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BC,eA+BD,oBAAC,QAAD;AACC,IAAA,GAAG,EAAEA,GADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BC,CADF;AAqCD;;AAED,eAAe5B,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Initialize from \"./Initialize\";\nimport StartStop from \"./StartStop\";\nimport FocusTimer from \"./FocusTimer\";\nimport Progress from \"./Progress\";\n\n/**\n * A component representing a Pomodoro timer.\n * @returns {JSX} A <div> element containing all other components.\n */\nfunction Pomodoro() {\n  const initTimer = {\n\t\tfocusMax: 60 * 25, // 60sec * 25min\n\t\tfocusLeft: 60 * 25, \n\t\tfocusFloor: 60 * 5, // 60sec * 5min\n\t\tfocusRoof: 60 * 60, // 60sec * 60min\n\n\t\tbreakMax: 60 * 5, // 60sec * 5min\n\t\tbreakLeft: 60 * 5,\n\t\tbreakFloor: 60 * 1, // 60sec * 1min\n\t\tbreakRoof: 60 * 15, // 60sec * 15min\n\n\t\tisTimerRunning: false,\n\t\tfocus: true,\n\t\tsessionStarted: false,\n\t};\n  const [timer, setTimer] = useState({...initTimer});\n\n  // useInterval is called every second when the timer is on\n\tuseInterval(\n    () => {\n\t\t\tif(timer.focusLeft <= 0 || timer.breakLeft <= 0) {\n\t\t\t\tconst alarm = new Audio(`https://onlineclock.net/audio/options/default.mp3`).play();\n\t\t\t\tconsole.log(alarm);\n\t\t\t\tswitchModes();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(timer.focus)\n\t\t\t\t\ttimePassed(\"focusLeft\");\n\t\t\t\telse\n\t\t\t\t\ttimePassed(\"breakLeft\");\t\n\t\t\t}\n    },\n    timer.isTimerRunning ? 1000 : null\n  );\n\n\t/**\n\t * If a second has passed, appropriately decrease second on timer.\n\t * @param {string} mode - Either \"focusLeft\" or \"breakLeft\".\n\t */\n\tfunction timePassed(mode) {\n\t\tsetTimer(() => {\n\t\t\treturn {\n\t\t\t\t...timer,\n\t\t\t\t[mode]: timer[mode] - 1,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Once focus/break ends, switch modes and reset timers.\n\t */\n\tfunction switchModes() {\n\t\tsetTimer(() => {\n\t\t\treturn {\n\t\t\t\t...timer, \n\t\t\t\tfocusLeft: timer.focusMax,\n\t\t\t\tbreakLeft: timer.breakMax,\n\t\t\t\tfocus: !timer.focus,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Adds an extra \"0\" to single-digit numbers.\n\t * @param {number} num - The number to pad.\n\t * @returns {number} - The padded number, if padded at all.\n\t */\n\tfunction pad(num) {\n\t\treturn num < 10 ? \"0\" + num : num;\n\t}\n\n\t/**\n\t * Gives a time formatted in mm:ss.\n\t * @param {string} mode Four possibilities: focusMax, focusLeft, breakMax, breakLeft \n\t */\n\tfunction getTime(mode) {\n\t\treturn `${ pad(Math.floor(timer[mode] / 60)) }:${ pad(timer[mode] % 60) }`;\n\t}\n\n\t/**\n\t * Gives a key of the timer object.\n\t * @param {string} key The key of the timer object.\n\t */\n\tfunction get(key) {\n\t\treturn timer[key];\n\t}\n\n\t/**\n\t * Increments/decrements max of focus/break.\n\t * @param {string} mode - Either \"focus\" or \"break\".\n\t * @param {number} change - Amount to change max by.\n\t */\n\tfunction changeMax(mode, change) {\n\t\tconst newTime = change < 0\n\t\t\t? Math.max(timer[mode + \"Floor\"], timer[mode + \"Max\"] + change)\n\t\t\t: Math.min(timer[mode + \"Roof\"], timer[mode + \"Max\"] + change);\n\n\t\tsetTimer(() => {\n\t\t\treturn {\n\t\t\t\t...timer,\n\t\t\t\t[mode + \"Max\"]: newTime,\n\t\t\t\t[mode + \"Left\"]: newTime,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Plays/pauses the timer.\n\t */\n  function playPause() {\n    setTimer(() => {\n\t\t\treturn {\n\t\t\t\t...timer, \n\t\t\t\tisTimerRunning: !timer.isTimerRunning,\n\t\t\t\tsessionStarted: true,\n\t\t\t};\n\t\t});\n  }\n\n\t/**\n\t Stops the timer, resetting it.\n\t */\n\tfunction stop() {\n\t\tsetTimer(() => {\n\t\t\treturn {\n\t\t\t\t...timer,\n\t\t\t\tisTimerRunning: false,\n\t\t\t\tsessionStarted: false,\n\t\t\t\tfocusLeft: timer.focusMax,\n\t\t\t\tbreakLeft: timer.breakMax,\n\t\t\t\tfocus: true,\n\t\t\t};\n\t\t});\n\t}\n\n  return (\n    <div className=\"pomodoro\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col\">\n\t\t\t\t\t<Initialize \n\t\t\t\t\t\tchangeMax={changeMax}\n\t\t\t\t\t\tgetTime={getTime}\n\t\t\t\t\t\tmode=\"focus\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col\">\n\t\t\t\t\t<div className=\"float-right\">\n\t\t\t\t\t\t<Initialize \n\t\t\t\t\t\t\tchangeMax={changeMax}\n\t\t\t\t\t\t\tgetTime={getTime}\n\t\t\t\t\t\t\tmode=\"break\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n      <StartStop \n\t\t\t\tplayPause={playPause}\n\t\t\t\tget={get}\n\t\t\t\tstop={stop}\n\t\t\t/>\n\n\t\t\t<FocusTimer \n\t\t\t\tgetTime={getTime}\n\t\t\t\tget={get}\n\t\t\t/>\n\n\t\t\t<Progress\n\t\t\t\tget={get}\n\t\t\t/>\n    </div>\n  );\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}