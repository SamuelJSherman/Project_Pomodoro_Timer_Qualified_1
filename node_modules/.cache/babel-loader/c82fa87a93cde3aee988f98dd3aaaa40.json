{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samue\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nimport SubTitle from \"./SubTitle\";\n\nfunction Pomodoro() {\n  const initialStates = {\n    sessionCountdown: 0,\n    ariaValue: 0\n  }; // Timer starts out paused\n\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [sessionCountdown, setSessionCountdown] = useState(initialStates.sessionCountdown);\n  const [sessionActive, setSessionActive] = useState(false);\n  const [ariaValue, setAriaValue] = useState(initialStates.ariaValue);\n  const [elapsed, setElapsed] = useState(0); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [focusSessionActive, setFocusSessionActive] = useState(false);\n  const [breakLeft, setBreakLeft] = useState(0); //disable and enable stop button\n\n  const [stopButton, setStopButton] = useState(true);\n  const [disableButton, setDisableButton] = useState(true);\n  /**\n   * Update the session state with new state after each tick of the interval.\n   * @param prevState\n   *  the previous session state\n   * @returns\n   *  new session state with timing information updated.\n   */\n\n  function nextTick(prevState) {\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n    return { ...prevState,\n      timeRemaining\n    };\n  }\n  /**\n   * Higher order function that returns a function to update the session state with the next session type upon timeout.\n   * @param focusDuration\n   *    the current focus duration\n   * @param breakDuration\n   *    the current break duration\n   * @returns\n   *  function to update the session state.\n   */\n\n\n  function nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    return currentSession => {\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60\n        };\n      }\n\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60\n      };\n    };\n  }\n\n  function handleStop() {\n    setIsTimerRunning(false);\n    setStopButton(true);\n    setSession(null);\n    setDisableButton(false);\n    setFocusSessionActive(false);\n    setSessionActive(false);\n    setElapsed(0);\n  }\n\n  useInterval(() => {\n    setBreakLeft(breakLeft + 1);\n\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    setSession(nextTick);\n    const left = session.timeRemaining;\n\n    if (session.label === \"Focusing\") {\n      setAriaValue(100 * (focusDuration * 60 - left) / (focusDuration * 60));\n    } else {\n      setAriaValue(100 * (breakDuration * 60 - left) / (breakDuration * 60));\n    }\n  }, isTimerRunning ? 1000 : null);\n  useInterval(() => {\n    if (session && session.timeRemaining) {\n      return setElapsed(elapsed + 1);\n    }\n  }, 1000);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function handlePlayPauseClick() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setDisableButton(false);\n            setSessionCountdown(sessionActive);\n            setSessionActive(true);\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Break, {\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(Focus, {\n    focusDuration: focusDuration,\n    setFocusDuration: setFocusDuration,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayPause, {\n    isTimerRunning: isTimerRunning,\n    handleStop: handleStop,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusSessionActive: focusSessionActive,\n    focusDuration: focusDuration,\n    sessionCountdown: sessionCountdown,\n    handlePlayPauseClick: handlePlayPauseClick,\n    ariaValue: ariaValue,\n    sessionActive: sessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SubTitle, {\n    sessionActive: sessionActive,\n    ariaValue: ariaValue,\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusSessionActive: focusSessionActive,\n    sessionCountdown: sessionCountdown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/samue/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Focus","Break","PlayPause","SubTitle","Pomodoro","initialStates","sessionCountdown","ariaValue","isTimerRunning","setIsTimerRunning","session","setSession","setSessionCountdown","sessionActive","setSessionActive","setAriaValue","elapsed","setElapsed","focusDuration","setFocusDuration","breakDuration","setBreakDuration","focusSessionActive","setFocusSessionActive","breakLeft","setBreakLeft","stopButton","setStopButton","disableButton","setDisableButton","nextTick","prevState","timeRemaining","Math","max","nextSession","currentSession","label","handleStop","Audio","play","left","handlePlayPauseClick","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nimport SubTitle from \"./SubTitle\";\n\nfunction Pomodoro() {\n\n  const initialStates = {\n \n    sessionCountdown: 0,\n \n    ariaValue: 0,\n   };\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [sessionCountdown, setSessionCountdown] = useState(initialStates.sessionCountdown);\n  const [sessionActive, setSessionActive] = useState(false);\n  const [ariaValue, setAriaValue] = useState(initialStates.ariaValue);\n  const[elapsed, setElapsed] = useState(0)\n\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [focusSessionActive, setFocusSessionActive] = useState(false);\n  const [breakLeft, setBreakLeft] = useState(0)\n\n  //disable and enable stop button\n  const [stopButton, setStopButton] = useState(true)\n  const [disableButton, setDisableButton] = useState(true)\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\n\n\nfunction handleStop(){\n  setIsTimerRunning(false)\n  setStopButton(true)\n  setSession(null)\n  setDisableButton(false)\n  setFocusSessionActive(false)\n  setSessionActive(false)\n  setElapsed(0)\n}\n\n\nuseInterval(() => {\n  setBreakLeft(breakLeft + 1)\n  if (session.timeRemaining === 0) {\n    new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n    setSession(nextSession(focusDuration, breakDuration));\n  }\n  setSession(nextTick);\nconst left = session.timeRemaining\nif(session.label === \"Focusing\") {\n  setAriaValue(100*(focusDuration * 60 - left)/(focusDuration*60))\n} else {\n  setAriaValue(100*(breakDuration * 60 - left)/(breakDuration*60))\n}\n},\nisTimerRunning ? 1000 : null\n);\n\n\nuseInterval(()=> {\n  if(session && session.timeRemaining) {\n    return setElapsed(elapsed + 1)\n  }\n},1000)\n\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n          function handlePlayPauseClick() {\n              setIsTimerRunning((prevState) => {\n                const nextState = !prevState;\n                if (nextState) {\n                  setSession((prevStateSession) => {\n                    // If the timer is starting and the previous session is null,\n                    // start a focusing session.\n                    if (prevStateSession === null) {\n                      setDisableButton(false);\n                      setSessionCountdown(sessionActive)\n                      setSessionActive(true)\n                      return {\n                        label: \"Focusing\",\n                        timeRemaining: focusDuration * 60,\n                      };\n                    }\n                    return prevStateSession;\n                  });\n                }\n              return nextState;\n              });\n            }\n\n  return (\n    <div className=\"pomodoro\">\n\n       <Break\n        breakDuration={breakDuration}\n        setBreakDuration={setBreakDuration}\n        isTimerRunning={isTimerRunning}\n      />\n      <Focus\n      focusDuration={focusDuration}\n      setFocusDuration={setFocusDuration}\n      isTimerRunning={isTimerRunning}\n\n      />\n      <PlayPause\n        isTimerRunning={isTimerRunning}\n        handleStop={handleStop}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        focusSessionActive={focusSessionActive}\n        focusDuration={focusDuration}\n        sessionCountdown={sessionCountdown}\n        handlePlayPauseClick={handlePlayPauseClick}\n        ariaValue={ariaValue}\n        sessionActive={sessionActive}\n      />\n      <SubTitle\n      sessionActive={sessionActive}\n      ariaValue={ariaValue}\n      session={session}\n      focusDuration={focusDuration}\n      breakDuration={breakDuration}\n      focusSessionActive={focusSessionActive}\n      sessionCountdown={sessionCountdown}\n\n      />\n    </div>\n  )\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}